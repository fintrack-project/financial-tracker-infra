services:
  swag:
    image: lscr.io/linuxserver/swag
    container_name: swag
    cap_add:
      - NET_ADMIN
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=UTC
      - URL=johnmjkim.com
      - SUBDOMAINS=fintrack
      - VALIDATION=http
      - STAGING=true
      - EMAIL=admin@johnmjkim.com
    volumes:
      - ./swag:/config
    ports:
      - 80:80
      - 443:443
    restart: unless-stopped
    networks:
      - fintrack-network
  frontend:
    build:
      context: ../financial-tracker-frontend
      target: prod  # Uses simplified prod stage (no nginx)
    ports:
      - "3000:3000"  # Internal only - SWAG handles external access
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=https://fintrack.johnmjkim.com/api
    # No SSL volumes needed - SWAG handles SSL certificates
    # No nginx config needed - SWAG handles reverse proxy
    depends_on:
      - backend
    networks:
      - fintrack-network
  backend:
    build:
      context: ../financial-tracker-backend
      target: prod
    ports:
      - "8080:8080"
    volumes:
      - ../financial-tracker-backend/src/main/resources/firebase-service-account.json:/app/src/main/resources/firebase-service-account.json:ro
      - ../financial-tracker-db/migrations:/app/migrations:ro
    environment:
      SPRING_PROFILES_ACTIVE: prod
      SPRING_DATASOURCE_URL: jdbc:postgresql://${DATABASE_HOST}:${DATABASE_INTERNAL_PORT}/${DATABASE_NAME}?currentSchema=${DATABASE_SCHEMA_NAME}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9093
      SPRING_KAFKA_PROPERTIES_SECURITY_PROTOCOL: PLAINTEXT
      # Mail Configuration
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USERNAME: 
      SMTP_PASSWORD: 
      SMTP_AUTH: false
      SMTP_STARTTLS: false
      # Flyway Configuration
      FLYWAY_LOCATIONS: filesystem:/app/migrations
      SPRING_FLYWAY_BASELINE_ON_MIGRATE: true
      SPRING_FLYWAY_VALIDATE_ON_MIGRATE: true
      SPRING_FLYWAY_CLEAN_DISABLED: true
      SPRING_FLYWAY_SCHEMAS: ${DATABASE_SCHEMA_NAME}
      SPRING_FLYWAY_DEFAULT_SCHEMA: ${DATABASE_SCHEMA_NAME}
      SPRING_FLYWAY_VALIDATE_MIGRATION_NAMING: true
      SPRING_FLYWAY_OUT_OF_ORDER: false
      SPRING_FLYWAY_IGNORE_MIGRATION_PATTERNS: "*:missing,*:future"
      # Stripe Configuration
      STRIPE_SECRET_KEY: ${STRIPE_TEST_SECRET_KEY}
      STRIPE_PUBLISHABLE_KEY: ${STRIPE_TEST_PUBLISHABLE_KEY}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_TEST_WEBHOOK_SECRET}
      # Firebase Configuration
      FIREBASE_SERVICE_ACCOUNT_PATH: /app/src/main/resources/firebase-service-account.json
      # Application URLs
      APP_BASE_URL: ${FRONTEND_URL}
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_healthy
      zookeeper:
        condition: service_healthy
      mailhog:
        condition: service_healthy
    networks:
      - fintrack-network
  etl:
    build:
      context: ../financial-tracker-etl
    environment:
      KAFKA_BROKER: ${KAFKA_BROKER}
      DATABASE_HOST: db
      DATABASE_PORT: ${DATABASE_INTERNAL_PORT}
      DATABASE_NAME: ${DATABASE_NAME}
      DATABASE_USER: ${POSTGRES_USER}
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD}
      DATABASE_SCHEMA_NAME: ${DATABASE_SCHEMA_NAME}
      # Python settings
      PYTHONDONTWRITEBYTECODE: 1
      PYTHONUNBUFFERED: 1
      # Application settings
      DEBUG: 0
      RELOAD: 0
      # Kafka consumer settings
      KAFKA_CONSUMER_GROUP_ID: etl-job-consumer-group
      KAFKA_CONSUMER_AUTO_OFFSET_RESET: earliest
      KAFKA_CONSUMER_MAX_POLL_INTERVAL_MS: 300000
      KAFKA_CONSUMER_SESSION_TIMEOUT_MS: 60000
      KAFKA_CONSUMER_HEARTBEAT_INTERVAL_MS: 20000
    volumes:
      - ../financial-tracker-etl:/app
    command: ["sh", "-c", "chmod 755 /app/entrypoint.sh; dos2unix /app/entrypoint.sh; /app/entrypoint.sh"]
    depends_on:
      db:
        condition: service_healthy
      backend:
        condition: service_started
      kafka:
        condition: service_healthy
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "supervisorctl status kafka_consumer | grep RUNNING || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    networks:
      - fintrack-network
  db:
    image: postgres:17.5
    ports:
      - "${DATABASE_HOST_PORT}:${DATABASE_INTERNAL_PORT}"
    environment:
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${DATABASE_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - fintrack-network
  mailhog:
    image: mailhog/mailhog:latest
    ports:
      - "${SMTP_PORT}:${SMTP_PORT}" # SMTP server
      - "${MAILHOG_PORT}:${MAILHOG_PORT}" # Web UI
    environment:
      MH_HOSTNAME: ${SMTP_HOST}
      MH_SMTP_BIND_ADDR: 0.0.0.0:1025
      MH_API_BIND_ADDR: 0.0.0.0:8025
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "1025"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - fintrack-network

volumes:
  postgres_data: 