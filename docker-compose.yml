version: '3.8'
services:
  jenkins:
    build:
      context: .
      dockerfile: ci-cd/Dockerfile.jenkins
    ports:
      - "9090:8080" # Jenkins UI
      # - "50000:50000" # Optional: Only needed for Jenkins agents
    volumes:
      - jenkins_home:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - JAVA_OPTS=-Djenkins.install.runSetupWizard=false
      - JENKINS_OPTS=--httpPort=8080
    user: root  # Start as root to set permissions
    group_add:
      - docker
    restart: unless-stopped
  frontend:
    build:
      context: ../financial-tracker-frontend
    depends_on:
      - backend
  backend:
    build:
      context: ../financial-tracker-backend
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_healthy
      zookeeper:
        condition: service_healthy
      mailhog:
        condition: service_healthy
    volumes:
      - ../financial-tracker-backend/src/main/resources/firebase-service-account.json:/app/src/main/resources/firebase-service-account.json:ro
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:${DATABASE_INTERNAL_PORT}/${DATABASE_NAME}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      # SMTP Configuration
      SPRING_MAIL_HOST: mailhog
      SPRING_MAIL_PORT: ${SMTP_PORT}
      SPRING_MAIL_USERNAME: 
      SPRING_MAIL_PASSWORD: 
      SPRING_MAIL_PROPERTIES_MAIL_SMTP_AUTH: false
      SPRING_MAIL_PROPERTIES_MAIL_SMTP_STARTTLS_ENABLE: false
      # JPA Configuration
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_SHOW_SQL: "true"
      SPRING_JPA_PROPERTIES_HIBERNATE_FORMAT_SQL: "true"
      # Stripe Configuration
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      STRIPE_PUBLISHABLE_KEY: ${STRIPE_PUBLISHABLE_KEY}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}
      # Firebase Configuration
      FIREBASE_SERVICE_ACCOUNT_PATH: /app/src/main/resources/firebase-service-account.json
      # Application URLs
      APP_BASE_URL: ${FRONTEND_URL}
    networks:
      - fintrack-network
  etl:
    build:
      context: ../financial-tracker-etl
    depends_on:
      db:
        condition: service_healthy
      backend:
        condition: service_started
      kafka:
        condition: service_healthy
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER: ${KAFKA_BROKER_HOST}:${KAFKA_BROKER_HOST_PORT}
      DATABASE_HOST: ${DATABASE_HOST}
      DATABASE_PORT: ${DATABASE_INTERNAL_PORT}
      DATABASE_NAME: ${DATABASE_NAME}
      DATABASE_USER: ${POSTGRES_USER}
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD}
    networks:
      - fintrack-network
  db:
    image: postgres:15
    volumes:
      - pgdata:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    networks:
      - fintrack-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${DATABASE_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    ports:
      - "${KAFKA_BROKER_HOST_PORT}:${KAFKA_BROKER_HOST_PORT}" # Host communication
      - "${KAFKA_BROKER_INTERNAL_PORT}:${KAFKA_BROKER_INTERNAL_PORT}" # Docker network communication
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: ${ZOOKEEPER_HOST}:${ZOOKEEPER_PORT}
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9093,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9093,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      zookeeper:
        condition: service_healthy
    networks:
      - fintrack-network
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9093 --list"]
      interval: 30s
      timeout: 10s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    ports:
      - "${ZOOKEEPER_PORT}:${ZOOKEEPER_PORT}"
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_PORT}
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - fintrack-network
    healthcheck:
      test: ["CMD-SHELL", "echo srvr | nc localhost ${ZOOKEEPER_PORT}"]
      interval: 30s
      timeout: 10s
      retries: 5

  mailhog:
    image: mailhog/mailhog
    ports:
      - "${SMTP_PORT}:${SMTP_PORT}" # SMTP server
      - "${MAILHOG_PORT}:${MAILHOG_PORT}" # Web UI
    networks:
      - fintrack-network
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost ${SMTP_PORT}"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  jenkins_home:
  pgdata:

networks:
  fintrack-network:
    external: true