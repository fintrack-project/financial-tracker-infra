# HTTP server - redirect to HTTPS
# Forces all HTTP traffic to redirect to HTTPS for security
# Prevents man-in-the-middle attacks and ensures encrypted communication
server {
    listen 80;
    server_name johnmjkim.com;
    
    # Redirect all HTTP traffic to HTTPS
    return 301 https://$server_name$request_uri;
}

# HTTPS server
# Main server block that handles all HTTPS traffic
# Provides encrypted communication and serves the React application
server {
    listen 443 ssl http2;
    server_name johnmjkim.com;

    # SSL Configuration
    # Defines SSL certificate and private key paths
    # Required for HTTPS functionality - enables encrypted connections
    ssl_certificate /etc/ssl/certs/nginx-selfsigned.crt;
    ssl_certificate_key /etc/ssl/private/nginx-selfsigned.key;
    
    # SSL Security Settings
    # Configures SSL/TLS protocols and cipher suites
    # Ensures secure communication using modern, strong encryption
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES128-GCM-SHA256;

    # Serve static files from the build directory
    # Tells nginx where to find the React build files
    # Required to serve the compiled React application (HTML, CSS, JS files)
    root /usr/share/nginx/html;
    index index.html;

    # Handle React client-side routing
    # Enables React Router to work properly
    # React is a Single Page Application (SPA) - all routes should serve index.html
    #      This allows React Router to handle navigation on the client side
    location / {
        try_files $uri /index.html;
    }

    # API proxy to backend
    # Forwards API requests to the Spring Boot backend
    # Frontend makes calls to /api/* endpoints that need to reach the backend service
    #      This proxy handles the communication between frontend and backend
    location /api/ {
        proxy_pass http://backend:8080;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Error page handling
    # Redirects 404 errors to React app for client-side handling
    # In SPAs, 404 errors should be handled by React Router, not nginx
    error_page 404 /index.html;
}
