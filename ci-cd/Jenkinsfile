pipeline {
    agent any

    environment {
        AWS_REGION = 'ap-southeast-2' // Set your AWS region
        AWS_ACCESS_KEY_ID = credentials('aws-access-key-id') // Add this in Jenkins credentials
        AWS_SECRET_ACCESS_KEY = credentials('aws-secret-access-key') // Add this in Jenkins credentials
        ECR_REPO_BACKEND = '833233524962.dkr.ecr.ap-southeast-2.amazonaws.com/financial-tracker-backend' // Replace with your ECR repo for backend
        ECR_REPO_FRONTEND = '833233524962.dkr.ecr.ap-southeast-2.amazonaws.com/financial-tracker-frontend' // Replace with your ECR repo for frontend
        ECR_REPO_DATABASE = '833233524962.dkr.ecr.ap-southeast-2.amazonaws.com/financial-tracker-db' // Replace with your ECR repo for database
    }

    stages {
        stage('Build') {
            steps {
                script {
                    // Build backend
                    dir('backend') {
                        echo 'Building backend...'
                        sh 'mvn clean package'
                        echo 'Backend build completed.'
                    }
                    // Build frontend
                    dir('frontend') {
                        echo 'Building frontend...'
                        sh 'npm install'
                        sh 'npm run build'
                        echo 'Frontend build completed.'
                    }
                    // Build ETL
                    dir('etl') {
                        echo 'Building ETL...'
                        sh 'docker build -t fintrack-etl .'
                        echo 'ETL build completed.'
                    }
                }
            }
        }

        stage('Dockerize') {
            steps {
                script {
                    // Authenticate Docker with ECR
                    echo 'Authenticating Docker with ECR...'
                    sh '''
                        aws ecr get-login-password --region $AWS_REGION | \
                        docker login --username AWS --password-stdin 833233524962.dkr.ecr.$AWS_REGION.amazonaws.com
                    '''
                    echo 'Docker authenticated with ECR.'

                    // Dockerize backend
                    dir('backend') {
                        echo 'Dockerizing backend $ECR_REPO_BACKEND:latest...'
                        sh 'docker build -t $ECR_REPO_BACKEND:latest .'
                        echo 'Backend Dockerized.'
                    }
                    // Dockerize frontend
                    dir('frontend') {
                        echo 'Dockerizing frontend $ECR_REPO_FRONTEND:latest...'
                        sh 'docker build -t $ECR_REPO_FRONTEND:latest .'
                        echo 'Frontend Dockerized.'
                    }
                    // Dockerize database (if needed)
                    dir('database') {
                        echo 'Dockerizing database $ECR_REPO_DATABASE:latest...'
                        sh 'docker build -t $ECR_REPO_DATABASE:latest .'
                        echo 'Database Dockerized.'
                    }
                }
            }
        }

        stage('Push Docker Images to ECR') {
            steps {
                script {
                    // Push backend image
                    echo 'Pushing backend image to $ECR_REPO_BACKEND:latest...'
                    sh 'docker push $ECR_REPO_BACKEND:latest'
                    echo 'Backend image pushed.'

                    // Push frontend image
                    echo 'Pushing frontend image to $ECR_REPO_FRONTEND:latest...'
                    sh 'docker push $ECR_REPO_FRONTEND:latest'
                    echo 'Frontend image pushed.'

                    // Push database image (if needed)
                    echo 'Pushing database image to $ECR_REPO_DATABASE:latest...'
                    sh 'docker push $ECR_REPO_DATABASE:latest'
                    echo 'Database image pushed.'
                }
            }
        }

        stage('Deploy to AWS') {
            steps {
                script {
                    // Deploy backend to ECS
                    echo 'Deploying backend to AWS ECS...'
                    sh 'aws ecs update-service --cluster fintrack-cluster --service fintrack-backend-service --force-new-deployment'
                    // Deploy frontend to S3
                    echo 'Deploying frontend to AWS S3...'
                    sh 'aws s3 sync frontend/build s3://fintrack-frontend-bucket'
                    // Configure S3 bucket for static website hosting
                    echo 'Configuring S3 bucket for static website hosting...'
                    sh 'aws s3 website s3://fintrack-frontend-bucket --index-document index.html --error-document error.html'
                }
            }
        }

        stage('Test') {
            steps {
                script {
                    // Run tests for backend
                    dir('backend') {
                        echo 'Running backend tests...'
                        sh 'mvn test'
                        echo 'Backend tests completed.'
                    }
                    // Run tests for frontend
                    dir('frontend') {
                        echo 'Running frontend tests...'
                        sh 'npm test'
                        echo 'Frontend tests completed.'
                    }
                }
            }
        }
    }

    post {
        success {
            mail to: 'johnkim.work@outlook.com',
                subject: "Jenkins Pipeline Success: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                body: "The pipeline completed successfully."
        }
        failure {
            mail to: 'johnkim.work@outlook.com',
                subject: "Jenkins Pipeline Failure: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                body: "The pipeline failed. Please check the logs."
        }
        always {
            script {
                sh 'docker system prune -f'
            }
        }
    }
}