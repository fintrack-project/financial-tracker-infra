pipeline {
    agent any

    environment {
        JAVA_HOME = '/opt/jdk-21'
        PATH = "${JAVA_HOME}/bin:${env.PATH}"
        QUAY_REPO_BACKEND = 'quay.io/johnkim1/financial-tracker-backend'
        QUAY_REPO_FRONTEND = 'quay.io/johnkim1/financial-tracker-frontend'
        QUAY_REPO_ETL = 'quay.io/johnkim1/financial-tracker-etl'
        QUAY_REPO_DB = 'quay.io/johnkim1/financial-tracker-db'
        DATABASE_NETWORK_NAME = 'fintrack-network'
    }

    stages {
        stage('Clone') {
            steps {
                script {
                    // Clone backend repository
                    echo 'Cloning backend repository...'
                    dir('backend') {
                        git branch: 'main', url: 'https://github.com/fintrack-project/financial-tracker-backend.git'
                    }
                    echo 'Backend repository cloned.'

                    // Clone frontend repository
                    echo 'Cloning frontend repository...'
                    dir('frontend') {
                        git branch: 'main', url: 'https://github.com/fintrack-project/financial-tracker-frontend.git'
                    }
                    echo 'Frontend repository cloned.'

                    // Clone ETL repository
                    echo 'Cloning ETL repository...'
                    dir('etl') {
                        git branch: 'main', url: 'https://github.com/fintrack-project/financial-tracker-etl.git'
                    }
                    echo 'ETL repository cloned.'

                    // Clone DB repository
                    echo 'Cloning DB repository...'
                    dir('db') {
                        git branch: '1-deploy-this-app-with-minimum-viable-features', url: 'https://github.com/fintrack-project/financial-tracker-db.git'
                    }
                    echo 'DB repository cloned.'
                }
            }
        }

        stage('Build') {
            steps {
                script {
                    // Log environment information
                    echo '=== Environment Information ==='
                    sh '''
                        echo "Java Version:"
                        java -version
                        echo "\nMaven Version:"
                        mvn -version
                        echo "\nNode Version:"
                        node -v
                        echo "\nNPM Version:"
                        npm -v
                        echo "\nPython Version:"
                        python3 --version
                        echo "\nCurrent Directory:"
                        pwd
                        echo "\nDirectory Contents:"
                        ls -la
                        echo "\nJAVA_HOME:"
                        echo $JAVA_HOME
                    '''
                    
                    // Build backend
                    dir('backend') {
                        echo '=== Building Backend ==='
                        echo 'Current Directory:'
                        sh 'pwd'
                        echo 'Directory Contents:'
                        sh 'ls -la'
                        echo 'Checking pom.xml content:'
                        sh 'cat pom.xml | grep -A 5 "<properties>"'
                        echo 'Building with Maven...'
                        sh 'mvn clean package -Dmaven.compiler.source=21 -Dmaven.compiler.target=21 -Dmaven.compiler.release=21'
                        echo 'Backend build completed.'
                    }
                    // Build frontend
                    dir('frontend') {
                        echo '=== Building Frontend ==='
                        echo 'Current Directory:'
                        sh 'pwd'
                        echo 'Directory Contents:'
                        sh 'ls -la'
                        echo 'Installing dependencies...'
                        sh 'npm install'
                        echo 'Building frontend...'
                        sh 'npm run build'
                        echo 'Frontend build completed.'
                    }
                    // Setup ETL
                    dir('etl') {
                        echo '=== Setting up ETL ==='
                        echo 'Current Directory:'
                        sh 'pwd'
                        echo 'Directory Contents:'
                        sh 'ls -la'
                        echo 'Creating Python virtual environment...'
                        sh 'python3 -m venv venv'
                        echo 'Installing Python dependencies...'
                        sh '. venv/bin/activate && pip install -r requirements.txt'
                        echo 'ETL setup completed.'
                    }
                }
            }
        }

        stage('Dockerize - Build Images') {
            steps {
                script {
                    // Dockerize backend
                    dir('backend') {
                        echo 'Dockerizing backend $QUAY_REPO_BACKEND:latest...'
                        sh 'docker build -t $QUAY_REPO_BACKEND:latest .'
                        echo 'Backend Dockerized.'
                    }
                    // Dockerize frontend
                    dir('frontend') {
                        echo 'Dockerizing frontend $QUAY_REPO_FRONTEND:latest...'
                        sh 'docker build -t $QUAY_REPO_FRONTEND:latest .'
                        echo 'Frontend Dockerized.'
                    }
                    // Dockerize ETL
                    dir('etl') {
                        echo 'Dockerizing ETL $QUAY_REPO_ETL:latest...'
                        sh 'docker build -t $QUAY_REPO_ETL:latest .'
                        echo 'ETL Dockerized.'
                    }
                    // Dockerize DB
                    dir('db') {
                        echo 'Dockerizing DB $QUAY_REPO_DB:latest...'
                        sh 'docker build -t $QUAY_REPO_DB:latest .'
                        echo 'DB Dockerized.'
                    }
                }
            }
        }

        stage('Push Docker Images to Quay') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'quay-credentials', usernameVariable: 'QUAY_USERNAME', passwordVariable: 'QUAY_PASSWORD')]) {
                        echo 'Logging in to Quay.io...'
                        sh '''
                            echo $QUAY_PASSWORD | docker login quay.io --username $QUAY_USERNAME --password-stdin
                        '''

                        // Push backend image
                        echo 'Pushing backend image to $QUAY_REPO_BACKEND:latest...'
                        sh 'docker push $QUAY_REPO_BACKEND:latest'
                        echo 'Backend image pushed.'

                        // Push frontend image
                        echo 'Pushing frontend image to $QUAY_REPO_FRONTEND:latest...'
                        sh 'docker push $QUAY_REPO_FRONTEND:latest'
                        echo 'Frontend image pushed.'

                        // Push ETL image
                        echo 'Pushing ETL image to $QUAY_REPO_ETL:latest...'
                        sh 'docker push $QUAY_REPO_ETL:latest'
                        echo 'ETL image pushed.'

                        // Push DB image
                        echo 'Pushing DB image to $QUAY_REPO_DB:latest...'
                        sh 'docker push $QUAY_REPO_DB:latest'
                        echo 'DB image pushed.'
                    }
                }
            }
        }

        stage('Test') {
            steps {
                echo 'Testing...'
            }
        }

        stage('Deploy') {
            steps {
                script {
                    echo 'Creating Docker network if it does not exist...'
                    sh '''
                        if ! docker network ls | grep -q ${DATABASE_NETWORK_NAME}; then
                            docker network create ${DATABASE_NETWORK_NAME}
                        fi
                    '''
                    
                    echo 'Deploying services...'
                    sh 'docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d'
                }
            }
        }
    }
}