pipeline {
    agent any

    tools {
        maven 'Maven 3.9.9'
        nodejs 'NodeJS 18.16.0'
    }

    environment {
        QUAY_CREDENTAILS = credentials('quay-credentials') // Quay.io robot account credentials
        QUAY_REPO_BACKEND = 'quay.io/johnkim1/financial-tracker-backend'
        QUAY_REPO_FRONTEND = 'quay.io/johnkim1/financial-tracker-frontend'
        QUAY_REPO_ETL = 'quay.io/johnkim1/financial-tracker-etl'
    }

    stages {
        stage('Clone') {
            steps {
                script {
                    // Clone backend repository
                    echo 'Cloning backend repository...'
                    dir('backend') {
                        git branch: 'main', url: 'https://github.com/fintrack-project/financial-tracker-backend.git'
                    }
                    echo 'Backend repository cloned.'

                    // Clone frontend repository
                    echo 'Cloning frontend repository...'
                    dir('frontend') {
                        git branch: 'main', url: 'https://github.com/fintrack-project/financial-tracker-frontend.git'
                    }
                    echo 'Frontend repository cloned.'

                    // Clone ETL repository
                    echo 'Cloning ETL repository...'
                    dir('etl') {
                        git branch: 'main', url: 'https://github.com/fintrack-project/financial-tracker-etl.git'
                    }
                    echo 'ETL repository cloned.'
                }
            }
        }

        stage('Build') {
            steps {
                script {
                    // Build backend
                    dir('backend') {
                        echo 'Building backend...'
                        sh 'mvn clean package'
                        echo 'Backend build completed.'
                    }
                    // Build frontend
                    dir('frontend') {
                        echo 'Building frontend...'
                        sh 'npm install'
                        sh 'npm run build'
                        echo 'Frontend build completed.'
                    }
                }
            }
        }

        stage('Dockerize - Build Images') {
            steps {
                script {
                    // Dockerize backend
                    dir('backend') {
                        echo 'Dockerizing backend $QUAY_REPO_BACKEND:latest...'
                        sh 'docker build -t $QUAY_REPO_BACKEND:latest .'
                        echo 'Backend Dockerized.'
                    }
                    // Dockerize frontend
                    dir('frontend') {
                        echo 'Dockerizing frontend $QUAY_REPO_FRONTEND:latest...'
                        sh 'docker build -t $QUAY_REPO_FRONTEND:latest .'
                        echo 'Frontend Dockerized.'
                    }
                    // Dockerize ETL
                    dir('etl') {
                        echo 'Dockerizing ETL $QUAY_REPO_ETL:latest...'
                        sh 'docker build -t $QUAY_REPO_ETL:latest .'
                        echo 'ETL Dockerized.'
                    }
                    // // Dockerize backend
                    // dir('backend') {
                    //     echo 'Current directory:'
                    //     sh 'pwd'
                    //     echo 'Contents of the directory:'
                    //     sh 'ls -la'
                    //     echo 'Dockerizing backend $ECR_REPO_BACKEND:latest...'
                    //     sh 'docker build -f Dockerfile -t $ECR_REPO_BACKEND:latest .'
                    //     echo 'Backend Dockerized.'
                    // }
                    // // Dockerize frontend
                    // dir('frontend') {
                    //     echo 'Current directory:'
                    //     sh 'pwd'
                    //     echo 'Contents of the directory:'
                    //     sh 'ls -la'
                    //     echo 'Dockerizing frontend $ECR_REPO_FRONTEND:latest...'
                    //     sh 'docker build -f Dockerfile -t $ECR_REPO_FRONTEND:latest .'
                    //     echo 'Frontend Dockerized.'
                    // }
                    // // Dockerize etl
                    // dir('etl') {
                    //     echo 'Current directory:'
                    //     sh 'pwd'
                    //     echo 'Contents of the directory:'
                    //     sh 'ls -la'
                    //     echo 'Dockerizing frontend $ECR_REPO_ETL:latest...'
                    //     sh 'docker build -f Dockerfile -t $ECR_REPO_ETL:latest .'
                    //     echo 'ETL Dockerized.'
                    // }
                }
            }
        }

        stage('Push Docker Images to ECR') {
            steps {
                script {
                    // Login to Quay.io
                    echo 'Logging in to Quay.io...'
                    echo 'QUAY_CREDENTIALS_USR: $QUAY_CREDENTIALS_USR'
                    echo 'QUAY_CREDENTIALS_PSW: $QUAY_CREDENTIALS_PSW'
                    sh '''
                        echo $QUAY_CREDENTIALS_PSW | docker login quay.io --username $QUAY_CREDENTIALS_USR --password-stdin
                    '''

                    // Push backend image
                    echo 'Pushing backend image to $QUAY_REPO_BACKEND:latest...'
                    sh 'docker push $QUAY_REPO_BACKEND:latest'
                    echo 'Backend image pushed.'

                    // Push frontend image
                    echo 'Pushing frontend image to $QUAY_REPO_FRONTEND:latest...'
                    sh 'docker push $QUAY_REPO_FRONTEND:latest'
                    echo 'Frontend image pushed.'

                    // Push ETL image
                    echo 'Pushing ETL image to $QUAY_REPO_ETL:latest...'
                    sh 'docker push $QUAY_REPO_ETL:latest'
                    echo 'ETL image pushed.'

                    // // Login to AWS ECR
                    // echo 'Logging in to AWS ECR...'
                    // sh '''
                    //     aws ecr get-login-password --region $AWS_REGION | \
                    //     docker login --username AWS --password-stdin $ECR_REPO_BACKEND
                    // '''
                    // // Push backend image
                    // echo 'Pushing backend image to $ECR_REPO_BACKEND:latest...'
                    // sh 'docker push $ECR_REPO_BACKEND:latest'
                    // echo 'Backend image pushed.'

                    // // Login to AWS ECR for frontend
                    // echo 'Logging in to AWS ECR for frontend...'
                    // sh '''
                    //     aws ecr get-login-password --region $AWS_REGION | \
                    //     docker login --username AWS --password-stdin $ECR_REPO_FRONTEND
                    // '''
                    // // Push frontend image
                    // echo 'Pushing frontend image to $ECR_REPO_FRONTEND:latest...'
                    // sh 'docker push $ECR_REPO_FRONTEND:latest'
                    // echo 'Frontend image pushed.'

                    // // Login to AWS ECR for ETL
                    // echo 'Logging in to AWS ECR for ETL...'
                    // sh '''
                    //     aws ecr get-login-password --region $AWS_REGION | \
                    //     docker login --username AWS --password-stdin $ECR_REPO_ETL
                    // '''
                    // // Push ETL image
                    // echo 'Pushing ETL image to $ECR_REPO_ETL:latest...'
                    // sh 'docker push $ECR_REPO_ETL:latest'
                    // echo 'ETL image pushed.'
                }
            }
        }

        // stage('Deploy to AWS') {
        //     steps {
        //         script {
        //             // Deploy backend to ECS
        //             echo 'Deploying backend to AWS ECS...'
        //             sh 'aws ecs update-service --cluster fintrack-cluster --service fintrack-backend-service --force-new-deployment'
        //             // Deploy frontend to S3
        //             echo 'Deploying frontend to AWS S3...'
        //             sh 'aws s3 sync frontend/build s3://fintrack-frontend-bucket'
        //             // Configure S3 bucket for static website hosting
        //             echo 'Configuring S3 bucket for static website hosting...'
        //             sh 'aws s3 website s3://fintrack-frontend-bucket --index-document index.html --error-document error.html'
        //         }
        //     }
        // }

        // stage('Test') {
        //     steps {
        //         script {
        //             // Run tests for backend
        //             dir('backend') {
        //                 echo 'Running backend tests...'
        //                 sh 'mvn test'
        //                 echo 'Backend tests completed.'
        //             }
        //             // Run tests for frontend
        //             dir('frontend') {
        //                 echo 'Running frontend tests...'
        //                 sh 'npm test'
        //                 echo 'Frontend tests completed.'
        //             }
        //         }
        //     }
        // }
    }

    post {
        success {
            mail to: 'johnkim.work@outlook.com',
                subject: "Jenkins Pipeline Success: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                body: "The pipeline completed successfully."
        }
        failure {
            mail to: 'johnkim.work@outlook.com',
                subject: "Jenkins Pipeline Failure: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                body: "The pipeline failed. Please check the logs."
        }
        always {
            script {
                sh 'docker system prune -f'
                cleanWs() // Cleans up the workspace after the build
            }
        }
    }
}